{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\frith\\\\Google Drive\\\\Dev\\\\assessment-sfm\\\\src\\\\components\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Question from \"./Question\";\nimport Answer from \"./Answer\";\nimport Navigator from \"./Navigator\";\nimport { useStateValue } from \"./StateProvider\";\nimport { useHistory } from \"react-router-dom\";\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\nimport \"../css/Test.css\";\n\nfunction Test({\n  location\n}) {\n  _s();\n\n  const [{\n    test,\n    contactId\n  }, dispatch] = useStateValue();\n  const history = useHistory(); // Connect Session Storage With Test Type\n\n  const processTest = () => {\n    // Check if session contains Test\n    if (sessionStorage.getItem(\"sessionTest\")) {\n      console.log(\"🔐 Session Test: \", sessionStorage.getItem(\"sessionTest\"));\n      dispatch({\n        type: \"SET_TEST\",\n        test: sessionStorage.getItem(\"sessionTest\")\n      });\n    } // Set Test From URL Params\n    else {\n        const urlParams = new URLSearchParams(location.search);\n        var test; // Process \"test\" Parameter\n\n        if (urlParams.has(\"test\")) {\n          test = urlParams.get(\"test\");\n          console.log(\"🔐 Param Test: \", test); // Sfm Assessment\n\n          if (test === \"sfm-assessment\") {\n            sessionStorage.setItem(\"sessionTest\", test);\n          } // Vault Assessment\n          else if (test === \"vault-assessment\") {\n              sessionStorage.setItem(\"sessionTest\", test);\n            } // Default\n            else {\n                console.log(\"🔐 Test param value not valid!\");\n              } // Activate Test\n\n\n          dispatch({\n            type: \"SET_TEST\",\n            test: sessionStorage.getItem(\"sessionTest\")\n          });\n        } else {\n          console.log(\"🔐 Test param was not found!\");\n        } // Remove contactId From Params\n\n\n        urlParams.delete(\"test\");\n        history.replace({\n          search: urlParams.toString()\n        });\n      }\n  }; // Connect Session Storage to IS ContactId\n\n\n  const processContactId = () => {\n    // Declare variable\n    var contactId; // Check if session contains contactId\n\n    if (sessionStorage.getItem(\"sessionContactId\")) {\n      dispatch({\n        type: \"SET_CONTACT_ID\"\n      });\n      console.log(\"🔐 ContactId Validated: \", sessionStorage.getItem(\"sessionContactId\"));\n    } // Set contactId from URL params\n    else {\n        // Fetch URL parameters\n        const urlParams = new URLSearchParams(location.search);\n\n        if (urlParams.has(\"contactId\")) {\n          contactId = +urlParams.get(\"contactId\"); // Validate contactId & process\n\n          if (!isNaN(contactId)) {\n            // Set session storage\n            sessionStorage.setItem(\"sessionContactId\", contactId); // Update DataLayer to validate session population\n\n            dispatch({\n              type: \"SET_CONTACT_ID\"\n            });\n            console.log(\"🔐 contactId: \", contactId);\n          } else {\n            console.log(\"🔐 contactId is NaN...\");\n          }\n        } else {\n          console.log(\"🔐 contactId param was not found!\");\n        }\n      }\n  }; // Connect Session Storage to Email\n\n\n  const processEmail = () => {\n    // Declare variable\n    var email; // Check if session contains contactId\n\n    if (sessionStorage.getItem(\"sessionEmail\")) {\n      console.log(\"🔐 Email Validated: \", sessionStorage.getItem(\"sessionEmail\"));\n    } else {\n      // Fetch URL parameters\n      const urlParams = new URLSearchParams(location.search);\n\n      if (urlParams.has(\"email\")) {\n        // Set email\n        email = urlParams.get(\"email\");\n        console.log(\"🔐 email: \", email); // Set session storage\n\n        sessionStorage.setItem(\"sessionEmail\", email);\n      } else {\n        console.log(\"🔐 Email param was not found!\");\n      }\n    }\n  };\n\n  const processUrl = () => {\n    // Fetch URL parameters\n    const urlParams = new URLSearchParams(location.search);\n\n    if (urlParams.has(\"email\")) {\n      urlParams.delete(\"email\");\n    }\n\n    if (urlParams.has(\"contactId\")) {\n      urlParams.delete(\"contactId\");\n    }\n\n    if (urlParams.has(\"test\")) {\n      urlParams.delete(\"test\");\n    } // Remove contactId From Params\n\n\n    history.replace({\n      search: urlParams.toString()\n    });\n  };\n\n  useEffect(() => {\n    processContactId();\n    processEmail();\n    processTest();\n    processUrl();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test\",\n    children: [!contactId && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-errorMissingID\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-errorMissingIDBox\",\n        children: [/*#__PURE__*/_jsxDEV(ErrorOutlineIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your data will not be saved...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You can still take the assessment, but your data will not transfer to the vault.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), test ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-header\",\n        children: \"Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Question, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Answer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Navigator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-errorMissingTest\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-errorMissingTestBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Pick Your Assessment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"If you are not a SFM Member, please click take the Vault Assessment...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"test-errorMissingTestButtons\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"?test=sfm-assessment\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"SFM Assessment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"?test=vault-assessment\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Vault Assessment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Test, \"1+hxkz37GCJ3AkvGpYhFjbc/qjc=\", false, function () {\n  return [useStateValue, useHistory];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/frith/Google Drive/Dev/assessment-sfm/src/components/Test.js"],"names":["React","useEffect","Question","Answer","Navigator","useStateValue","useHistory","ErrorOutlineIcon","Test","location","test","contactId","dispatch","history","processTest","sessionStorage","getItem","console","log","type","urlParams","URLSearchParams","search","has","get","setItem","delete","replace","toString","processContactId","isNaN","processEmail","email","processUrl"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Question from \"./Question\";\r\nimport Answer from \"./Answer\";\r\nimport Navigator from \"./Navigator\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\r\nimport \"../css/Test.css\";\r\n\r\nfunction Test({ location }) {\r\n  const [{ test, contactId }, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n\r\n  // Connect Session Storage With Test Type\r\n  const processTest = () => {\r\n    // Check if session contains Test\r\n    if (sessionStorage.getItem(\"sessionTest\")) {\r\n      console.log(\"🔐 Session Test: \", sessionStorage.getItem(\"sessionTest\"));\r\n      dispatch({\r\n        type: \"SET_TEST\",\r\n        test: sessionStorage.getItem(\"sessionTest\"),\r\n      });\r\n    }\r\n\r\n    // Set Test From URL Params\r\n    else {\r\n      const urlParams = new URLSearchParams(location.search);\r\n      var test;\r\n\r\n      // Process \"test\" Parameter\r\n      if (urlParams.has(\"test\")) {\r\n        test = urlParams.get(\"test\");\r\n        console.log(\"🔐 Param Test: \", test);\r\n        // Sfm Assessment\r\n        if (test === \"sfm-assessment\") {\r\n          sessionStorage.setItem(\"sessionTest\", test);\r\n        }\r\n        // Vault Assessment\r\n        else if (test === \"vault-assessment\") {\r\n          sessionStorage.setItem(\"sessionTest\", test);\r\n        }\r\n        // Default\r\n        else {\r\n          console.log(\"🔐 Test param value not valid!\");\r\n        }\r\n        // Activate Test\r\n        dispatch({\r\n          type: \"SET_TEST\",\r\n          test: sessionStorage.getItem(\"sessionTest\"),\r\n        });\r\n      } else {\r\n        console.log(\"🔐 Test param was not found!\");\r\n      }\r\n\r\n      // Remove contactId From Params\r\n      urlParams.delete(\"test\");\r\n      history.replace({\r\n        search: urlParams.toString(),\r\n      });\r\n    }\r\n  };\r\n\r\n  // Connect Session Storage to IS ContactId\r\n  const processContactId = () => {\r\n    // Declare variable\r\n    var contactId;\r\n\r\n    // Check if session contains contactId\r\n    if (sessionStorage.getItem(\"sessionContactId\")) {\r\n      dispatch({ type: \"SET_CONTACT_ID\" });\r\n      console.log(\r\n        \"🔐 ContactId Validated: \",\r\n        sessionStorage.getItem(\"sessionContactId\")\r\n      );\r\n    }\r\n\r\n    // Set contactId from URL params\r\n    else {\r\n      // Fetch URL parameters\r\n      const urlParams = new URLSearchParams(location.search);\r\n\r\n      if (urlParams.has(\"contactId\")) {\r\n        contactId = +urlParams.get(\"contactId\");\r\n\r\n        // Validate contactId & process\r\n        if (!isNaN(contactId)) {\r\n          // Set session storage\r\n          sessionStorage.setItem(\"sessionContactId\", contactId);\r\n          // Update DataLayer to validate session population\r\n          dispatch({ type: \"SET_CONTACT_ID\" });\r\n          console.log(\"🔐 contactId: \", contactId);\r\n        } else {\r\n          console.log(\"🔐 contactId is NaN...\");\r\n        }\r\n      } else {\r\n        console.log(\"🔐 contactId param was not found!\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Connect Session Storage to Email\r\n  const processEmail = () => {\r\n    // Declare variable\r\n    var email;\r\n\r\n    // Check if session contains contactId\r\n    if (sessionStorage.getItem(\"sessionEmail\")) {\r\n      console.log(\r\n        \"🔐 Email Validated: \",\r\n        sessionStorage.getItem(\"sessionEmail\")\r\n      );\r\n    } else {\r\n      // Fetch URL parameters\r\n      const urlParams = new URLSearchParams(location.search);\r\n\r\n      if (urlParams.has(\"email\")) {\r\n        // Set email\r\n        email = urlParams.get(\"email\");\r\n        console.log(\"🔐 email: \", email);\r\n        // Set session storage\r\n        sessionStorage.setItem(\"sessionEmail\", email);\r\n      } else {\r\n        console.log(\"🔐 Email param was not found!\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const processUrl = () => {\r\n    // Fetch URL parameters\r\n    const urlParams = new URLSearchParams(location.search);\r\n\r\n    if (urlParams.has(\"email\")) {\r\n      urlParams.delete(\"email\");\r\n    }\r\n    if (urlParams.has(\"contactId\")) {\r\n      urlParams.delete(\"contactId\");\r\n    }\r\n    if (urlParams.has(\"test\")) {\r\n      urlParams.delete(\"test\");\r\n    }\r\n\r\n    // Remove contactId From Params\r\n    history.replace({\r\n      search: urlParams.toString(),\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    processContactId();\r\n    processEmail();\r\n    processTest();\r\n    processUrl();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"test\">\r\n      {!contactId && (\r\n        <div className=\"test-errorMissingID\">\r\n          <div className=\"test-errorMissingIDBox\">\r\n            <ErrorOutlineIcon />\r\n            <p>Your data will not be saved...</p>\r\n            <p>\r\n              You can still take the assessment, but your data will not transfer\r\n              to the vault.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {test ? (\r\n        <div className=\"test-container\">\r\n          <div className=\"test-header\">Questions</div>\r\n          <Question />\r\n          <Answer />\r\n          <Navigator />\r\n        </div>\r\n      ) : (\r\n        <div className=\"test-errorMissingTest\">\r\n          <div className=\"test-errorMissingTestBox\">\r\n            <h1>Pick Your Assessment</h1>\r\n            <p>\r\n              If you are not a SFM Member, please click take the Vault\r\n              Assessment...\r\n            </p>\r\n            <div className=\"test-errorMissingTestButtons\">\r\n              <a href=\"?test=sfm-assessment\">\r\n                <button>SFM Assessment</button>\r\n              </a>\r\n              <a href=\"?test=vault-assessment\">\r\n                <button>Vault Assessment</button>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Test;\r\n"]},"metadata":{},"sourceType":"module"}