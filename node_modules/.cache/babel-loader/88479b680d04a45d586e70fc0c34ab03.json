{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\frith\\\\Google Drive\\\\Dev\\\\assessment-sfm\\\\src\\\\components\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Question from \"./Question\";\nimport Answer from \"./Answer\";\nimport Navigator from \"./Navigator\";\nimport { useStateValue } from \"./StateProvider\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../css/Test.css\";\n\nfunction Test({\n  location\n}) {\n  _s();\n\n  const [{\n    test\n  }, dispatch] = useStateValue();\n  const history = useHistory();\n\n  const processTest = () => {\n    // Check if session contains Test\n    if (sessionStorage.getItem(\"sessionTest\")) {\n      dispatch({\n        type: \"SET_TEST\",\n        test: sessionStorage.getItem(\"sesstionTest\")\n      });\n    } // Set Test From URL Params\n    else {\n        const urlParams = new URLSearchParams(location.search);\n        var test;\n\n        if (urlParams.has(\"test\")) {\n          test = urlParams.get(\"test\"); // Sfm Assessment\n\n          if (test === \"sfm-assessment\") {\n            sessionStorage.setItem(\"sessionTest\", test);\n          } // Vault Assessment\n          else if (test === \"vault-assessment\") {\n              sessionStorage.setItem(\"sessionTest\", test);\n            } // Activate Test\n\n\n          dispatch({\n            type: \"SET_TEST\",\n            test: sessionStorage.getItem(\"sessionTest\")\n          });\n        }\n      }\n  };\n\n  const processContactId = () => {\n    // Declare variable\n    var contactId; // Check if session contains contactId\n\n    if (sessionStorage.getItem(\"sessionContactId\")) {\n      dispatch({\n        type: \"SET_CONTACT_ID\"\n      });\n      console.log(\"üîê Session Validated: \", sessionStorage.getItem(\"sessionContactId\"));\n    } // Set contactId from URL params\n    else {\n        // Fetch URL parameters\n        const urlParams = new URLSearchParams(location.search);\n\n        if (urlParams.has(\"contactId\")) {\n          contactId = +urlParams.get(\"contactId\"); // Validate contactId & process\n\n          if (!isNaN(contactId)) {\n            // Set session storage\n            sessionStorage.setItem(\"sessionContactId\", contactId); // Update DataLayer to validate session population\n\n            dispatch({\n              type: \"SET_CONTACT_ID\"\n            });\n            console.log(\"üîê contactId: \", contactId);\n            console.log(\"üîê Session Created: \", sessionStorage.getItem(\"sessionContactId\"));\n          } else {\n            console.log(\"üîê contactId is NaN...\");\n          }\n        } else {\n          console.log(\"üîê contactId Param was not found!\");\n        } // Remove contactId From Params\n\n\n        urlParams.delete(\"contactId\");\n        history.replace({\n          search: urlParams.toString()\n        });\n      }\n  };\n\n  useEffect(() => {\n    // Populate Session Storage With ContactId\n    processContactId(); // Populate Session Storage With Test\n\n    processTest(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test\",\n    children: test ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-header\",\n        children: \"Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Test, \"NN3Yvd3XibZsbtd0xDkYs9+d6yM=\", false, function () {\n  return [useStateValue, useHistory];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/frith/Google Drive/Dev/assessment-sfm/src/components/Test.js"],"names":["React","useEffect","Question","Answer","Navigator","useStateValue","useHistory","Test","location","test","dispatch","history","processTest","sessionStorage","getItem","type","urlParams","URLSearchParams","search","has","get","setItem","processContactId","contactId","console","log","isNaN","delete","replace","toString"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Question from \"./Question\";\r\nimport Answer from \"./Answer\";\r\nimport Navigator from \"./Navigator\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../css/Test.css\";\r\n\r\nfunction Test({ location }) {\r\n  const [{ test }, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n\r\n  const processTest = () => {\r\n    // Check if session contains Test\r\n    if (sessionStorage.getItem(\"sessionTest\")) {\r\n      dispatch({\r\n        type: \"SET_TEST\",\r\n        test: sessionStorage.getItem(\"sesstionTest\"),\r\n      });\r\n    }\r\n\r\n    // Set Test From URL Params\r\n    else {\r\n      const urlParams = new URLSearchParams(location.search);\r\n      var test;\r\n\r\n      if (urlParams.has(\"test\")) {\r\n        test = urlParams.get(\"test\");\r\n        // Sfm Assessment\r\n        if (test === \"sfm-assessment\") {\r\n          sessionStorage.setItem(\"sessionTest\", test);\r\n        }\r\n        // Vault Assessment\r\n        else if (test === \"vault-assessment\") {\r\n          sessionStorage.setItem(\"sessionTest\", test);\r\n        }\r\n        // Activate Test\r\n        dispatch({\r\n          type: \"SET_TEST\",\r\n          test: sessionStorage.getItem(\"sessionTest\"),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const processContactId = () => {\r\n    // Declare variable\r\n    var contactId;\r\n\r\n    // Check if session contains contactId\r\n    if (sessionStorage.getItem(\"sessionContactId\")) {\r\n      dispatch({ type: \"SET_CONTACT_ID\" });\r\n      console.log(\r\n        \"üîê Session Validated: \",\r\n        sessionStorage.getItem(\"sessionContactId\")\r\n      );\r\n    }\r\n\r\n    // Set contactId from URL params\r\n    else {\r\n      // Fetch URL parameters\r\n      const urlParams = new URLSearchParams(location.search);\r\n\r\n      if (urlParams.has(\"contactId\")) {\r\n        contactId = +urlParams.get(\"contactId\");\r\n\r\n        // Validate contactId & process\r\n        if (!isNaN(contactId)) {\r\n          // Set session storage\r\n          sessionStorage.setItem(\"sessionContactId\", contactId);\r\n          // Update DataLayer to validate session population\r\n          dispatch({ type: \"SET_CONTACT_ID\" });\r\n          console.log(\"üîê contactId: \", contactId);\r\n          console.log(\r\n            \"üîê Session Created: \",\r\n            sessionStorage.getItem(\"sessionContactId\")\r\n          );\r\n        } else {\r\n          console.log(\"üîê contactId is NaN...\");\r\n        }\r\n      } else {\r\n        console.log(\"üîê contactId Param was not found!\");\r\n      }\r\n\r\n      // Remove contactId From Params\r\n      urlParams.delete(\"contactId\");\r\n      history.replace({\r\n        search: urlParams.toString(),\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Populate Session Storage With ContactId\r\n    processContactId();\r\n    // Populate Session Storage With Test\r\n    processTest();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"test\">\r\n      {test ? (\r\n        <div className=\"test-container\">\r\n          <div className=\"test-header\">Questions</div>\r\n          {/* <Question />\r\n          <Answer />\r\n          <Navigator /> */}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <button>Submit</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Test;\r\n"]},"metadata":{},"sourceType":"module"}