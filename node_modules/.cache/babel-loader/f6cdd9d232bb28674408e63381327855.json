{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\frith\\\\Desktop\\\\dev\\\\react\\\\assessment-sfm\\\\src\\\\components\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Question from \"./Question\";\nimport Answer from \"./Answer\";\nimport Navigator from \"./Navigator\";\nimport { useStateValue } from \"./StateProvider\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../css/Test.css\";\n\nfunction Test({\n  location\n}) {\n  _s();\n\n  const [{\n    contactId\n  }, dispatch] = useStateValue();\n  const history = useHistory();\n  useEffect(() => {\n    // Declare variable\n    var contactId; // Check if session contains contactId\n\n    if (sessionStorage.getItem(\"sessionContactId\")) {\n      dispatch({\n        type: \"SET_CONTACT_ID\"\n      });\n    } // Set contactId from URL params\n    else {\n        // Fetch URL parameters\n        const urlParams = new URLSearchParams(location.search);\n\n        if (urlParams.has(\"contactId\")) {\n          contactId = +urlParams.get(\"contactId\"); // Validate contactId & process\n\n          if (contactId !== NaN && contactId > 0) {\n            // Set session storage\n            sessionStorage.setItem(\"contactIdSession\", contactId); // Update DataLayer to validate session population\n\n            dispatch({\n              type: \"SET_CONTACT_ID\"\n            });\n          } else {\n            console.log(\"üîê contactId is NaN...\");\n          }\n        } else {\n          console.log(\"üîê contactId Param was not found!\");\n        } // Remove contactId From Params\n\n\n        urlParams.delete(\"contactId\");\n        history.replace({\n          search: urlParams.toString()\n        });\n      }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-header\",\n        children: \"Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Question, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Answer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Test, \"g+reGMLk89NlBx2DMWAl4paJzU8=\", false, function () {\n  return [useStateValue, useHistory];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/frith/Desktop/dev/react/assessment-sfm/src/components/Test.js"],"names":["React","useState","useEffect","Question","Answer","Navigator","useStateValue","useHistory","Test","location","contactId","dispatch","history","sessionStorage","getItem","type","urlParams","URLSearchParams","search","has","get","NaN","setItem","console","log","delete","replace","toString"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAO,iBAAP;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAA4B;AAAA;;AAC1B,QAAM,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgBC,QAAhB,IAA4BL,aAAa,EAA/C;AACA,QAAMM,OAAO,GAAGL,UAAU,EAA1B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIQ,SAAJ,CAFc,CAId;;AACA,QAAIG,cAAc,CAACC,OAAf,CAAuB,kBAAvB,CAAJ,EAAgD;AAC9CH,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KAFD,CAIA;AAJA,SAKK;AACH;AACA,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBR,QAAQ,CAACS,MAA7B,CAAlB;;AAEA,YAAIF,SAAS,CAACG,GAAV,CAAc,WAAd,CAAJ,EAAgC;AAC9BT,UAAAA,SAAS,GAAG,CAACM,SAAS,CAACI,GAAV,CAAc,WAAd,CAAb,CAD8B,CAG9B;;AACA,cAAIV,SAAS,KAAKW,GAAd,IAAqBX,SAAS,GAAG,CAArC,EAAwC;AACtC;AACAG,YAAAA,cAAc,CAACS,OAAf,CAAuB,kBAAvB,EAA2CZ,SAA3C,EAFsC,CAGtC;;AACAC,YAAAA,QAAQ,CAAC;AAAEI,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR;AACD,WALD,MAKO;AACLQ,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;AACF,SAZD,MAYO;AACLD,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACD,SAlBE,CAoBH;;;AACAR,QAAAA,SAAS,CAACS,MAAV,CAAiB,WAAjB;AACAb,QAAAA,OAAO,CAACc,OAAR,CAAgB;AACdR,UAAAA,MAAM,EAAEF,SAAS,CAACW,QAAV;AADM,SAAhB;AAGD;AACF,GApCQ,EAoCN,EApCM,CAAT;AAsCA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GApDQnB,I;UAC2BF,a,EAClBC,U;;;KAFTC,I;AAsDT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Question from \"./Question\";\r\nimport Answer from \"./Answer\";\r\nimport Navigator from \"./Navigator\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../css/Test.css\";\r\n\r\nfunction Test({ location }) {\r\n  const [{ contactId }, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Declare variable\r\n    var contactId;\r\n\r\n    // Check if session contains contactId\r\n    if (sessionStorage.getItem(\"sessionContactId\")) {\r\n      dispatch({ type: \"SET_CONTACT_ID\" });\r\n    }\r\n\r\n    // Set contactId from URL params\r\n    else {\r\n      // Fetch URL parameters\r\n      const urlParams = new URLSearchParams(location.search);\r\n\r\n      if (urlParams.has(\"contactId\")) {\r\n        contactId = +urlParams.get(\"contactId\");\r\n\r\n        // Validate contactId & process\r\n        if (contactId !== NaN && contactId > 0) {\r\n          // Set session storage\r\n          sessionStorage.setItem(\"contactIdSession\", contactId);\r\n          // Update DataLayer to validate session population\r\n          dispatch({ type: \"SET_CONTACT_ID\" });\r\n        } else {\r\n          console.log(\"üîê contactId is NaN...\");\r\n        }\r\n      } else {\r\n        console.log(\"üîê contactId Param was not found!\");\r\n      }\r\n\r\n      // Remove contactId From Params\r\n      urlParams.delete(\"contactId\");\r\n      history.replace({\r\n        search: urlParams.toString(),\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"test\">\r\n      <div className=\"test-container\">\r\n        <div className=\"test-header\">Questions</div>\r\n        <Question />\r\n        <Answer />\r\n        <Navigator />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Test;\r\n"]},"metadata":{},"sourceType":"module"}