{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/frithjofthorvik/Google Drive/Dev/assessment-sfm/src/components/Answer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useStateValue } from \"./StateProvider\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"../css/Answer.css\";\n\nfunction Answer() {\n  _s();\n\n  const [{\n    questionNum,\n    test,\n    answers,\n    recommended,\n    submit,\n    contactId\n  }, dispatch] = useStateValue();\n  const history = useHistory(); // Fill array of answers with another array of temporary 0's\n\n  const handleEmptyArray = () => {\n    let array = [];\n\n    for (let i = 0; i < test.answers[questionNum - 1].options.length; i++) {\n      array.push(0);\n    }\n\n    return array;\n  }; // Inverts & updates the multi answer array from previous value\n\n\n  const handleMultiAnswer = (array, i) => {\n    if (array[i] === 0) {\n      array[i] = 1;\n    } else {\n      array[i] = 0;\n    }\n\n    return array;\n  }; // Handle POST submission after recommended array is updated & redirects user to results\n\n\n  useEffect(() => {\n    if (recommended !== null) {\n      const handleSubmit = () => {\n        // Change Post URL\n        if (contactId) {\n          if (sessionStorage.getItem(\"sessionContactId\")) {\n            if (sessionStorage.getItem(\"sessionTest\")) {\n              axios.post(`https://scrapthe9to5.com/scripts/IS/ISVaultAssessment.php?assessment=${sessionStorage.getItem(\"sessionTest\")}`, {\n                contactId: sessionStorage.getItem(\"sessionContactId\"),\n                recommended: recommended,\n                answers: answers\n              }).then(res => {\n                console.log(res);\n              });\n            } else {\n              console.log(\"Session test was not recorded...\");\n            }\n          } else {\n            console.log(\"Session contactId was not recorded...\");\n          }\n        } else {\n          console.log(\"Session contactId was not stored...\");\n        }\n\n        history.push(\"/result\");\n      };\n\n      handleSubmit();\n    }\n  }, [recommended, answers, history, contactId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"answer\",\n    children: [!submit ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-container\",\n      children: test.answers[questionNum - 1].options.map((option, i) => {\n        var _answers;\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => {\n            // Single Answer Questions\n            if (test.answers[questionNum - 1].select === \"single\") {\n              dispatch({\n                type: \"ANSWER\",\n                answer: i + 1\n              });\n              dispatch({\n                type: \"NEXT_QUESTION\"\n              });\n            } // Multi Answer Questions\n            else if (test.answers[questionNum - 1].select === \"multi\") {\n                let array = answers[questionNum - 1]; // Handle Empty Multi Answer Array\n\n                if (!array) {\n                  array = handleEmptyArray();\n                } // Handle Multi Answer Array\n\n\n                array = handleMultiAnswer(array, i); // Apply New Answer Array to DataLayer\n\n                dispatch({\n                  type: \"ANSWER\",\n                  answer: array\n                });\n              }\n          },\n          className: `${test.answers[questionNum - 1].select === \"multi\" ? \"answer-optionMulti\" : \"answer-optionSingle\"}\n              ${((_answers = answers[questionNum - 1]) === null || _answers === void 0 ? void 0 : _answers.length) > 1 ? answers[questionNum - 1][i] === 1 ? \"answer--selected\" : \"\" : answers[questionNum - 1] === i + 1 ? \"answer--selected\" : \"\"}\n              `,\n          children: option\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : null, submit ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-submit\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => dispatch({\n          type: \"SUBMIT\"\n        }),\n        className: \"answer-submitButton\",\n        children: \"Submit Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Answer, \"aPmSeLHsHaHyCVKjmEqw4weycP0=\", false, function () {\n  return [useStateValue, useHistory];\n});\n\n_c = Answer;\nexport default Answer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Answer\");","map":{"version":3,"sources":["/Users/frithjofthorvik/Google Drive/Dev/assessment-sfm/src/components/Answer.js"],"names":["React","useEffect","useStateValue","useHistory","axios","Answer","questionNum","test","answers","recommended","submit","contactId","dispatch","history","handleEmptyArray","array","i","options","length","push","handleMultiAnswer","handleSubmit","sessionStorage","getItem","post","then","res","console","log","map","option","select","type","answer"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"../css/Answer.css\";\r\n\r\nfunction Answer() {\r\n  const [\r\n    { questionNum, test, answers, recommended, submit, contactId },\r\n    dispatch,\r\n  ] = useStateValue();\r\n  const history = useHistory();\r\n\r\n  // Fill array of answers with another array of temporary 0's\r\n  const handleEmptyArray = () => {\r\n    let array = [];\r\n    for (let i = 0; i < test.answers[questionNum - 1].options.length; i++) {\r\n      array.push(0);\r\n    }\r\n    return array;\r\n  };\r\n\r\n  // Inverts & updates the multi answer array from previous value\r\n  const handleMultiAnswer = (array, i) => {\r\n    if (array[i] === 0) {\r\n      array[i] = 1;\r\n    } else {\r\n      array[i] = 0;\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  // Handle POST submission after recommended array is updated & redirects user to results\r\n  useEffect(() => {\r\n    if (recommended !== null) {\r\n      const handleSubmit = () => {\r\n        // Change Post URL\r\n        if (contactId) {\r\n          if (sessionStorage.getItem(\"sessionContactId\")) {\r\n            if (sessionStorage.getItem(\"sessionTest\")) {\r\n              axios\r\n                .post(\r\n                  `https://scrapthe9to5.com/scripts/IS/ISVaultAssessment.php?assessment=${sessionStorage.getItem(\r\n                    \"sessionTest\"\r\n                  )}`,\r\n                  {\r\n                    contactId: sessionStorage.getItem(\"sessionContactId\"),\r\n                    recommended: recommended,\r\n                    answers: answers,\r\n                  }\r\n                )\r\n                .then((res) => {\r\n                  console.log(res);\r\n                });\r\n            } else {\r\n              console.log(\"Session test was not recorded...\");\r\n            }\r\n          } else {\r\n            console.log(\"Session contactId was not recorded...\");\r\n          }\r\n        } else {\r\n          console.log(\"Session contactId was not stored...\");\r\n        }\r\n        history.push(\"/result\");\r\n      };\r\n      handleSubmit();\r\n    }\r\n  }, [recommended, answers, history, contactId]);\r\n\r\n  return (\r\n    <div className=\"answer\">\r\n      {!submit ? (\r\n        <div className=\"answer-container\">\r\n          {test.answers[questionNum - 1].options.map((option, i) => (\r\n            <div\r\n              key={i}\r\n              onClick={() => {\r\n                // Single Answer Questions\r\n                if (test.answers[questionNum - 1].select === \"single\") {\r\n                  dispatch({ type: \"ANSWER\", answer: i + 1 });\r\n                  dispatch({ type: \"NEXT_QUESTION\" });\r\n                }\r\n\r\n                // Multi Answer Questions\r\n                else if (test.answers[questionNum - 1].select === \"multi\") {\r\n                  let array = answers[questionNum - 1];\r\n\r\n                  // Handle Empty Multi Answer Array\r\n                  if (!array) {\r\n                    array = handleEmptyArray();\r\n                  }\r\n\r\n                  // Handle Multi Answer Array\r\n                  array = handleMultiAnswer(array, i);\r\n\r\n                  // Apply New Answer Array to DataLayer\r\n                  dispatch({\r\n                    type: \"ANSWER\",\r\n                    answer: array,\r\n                  });\r\n                }\r\n              }}\r\n              className={`${\r\n                test.answers[questionNum - 1].select === \"multi\"\r\n                  ? \"answer-optionMulti\"\r\n                  : \"answer-optionSingle\"\r\n              }\r\n              ${\r\n                answers[questionNum - 1]?.length > 1\r\n                  ? answers[questionNum - 1][i] === 1\r\n                    ? \"answer--selected\"\r\n                    : \"\"\r\n                  : answers[questionNum - 1] === i + 1\r\n                  ? \"answer--selected\"\r\n                  : \"\"\r\n              }\r\n              `}\r\n            >\r\n              {option}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n      {submit ? (\r\n        <div className=\"answer-submit\">\r\n          <div\r\n            onClick={() => dispatch({ type: \"SUBMIT\" })}\r\n            className=\"answer-submitButton\"\r\n          >\r\n            Submit Answers\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Answer;\r\n"]},"metadata":{},"sourceType":"module"}