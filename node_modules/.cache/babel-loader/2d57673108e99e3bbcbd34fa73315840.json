{"ast":null,"code":"import { test, courses, vaultAssessment, vaultAssessmentPaths } from \"./test\"; // DataLayer\n\nexport const initialState = {\n  questionNum: 1,\n  // test: test,\n  test: vaultAssessment,\n  answers: [],\n  submit: false,\n  contactId: false,\n  recommended: null,\n  activeCourse: null\n}; // Remove Item From List\n\nconst removeFromList = (listData, id) => {\n  const newList = listData.filter(item => item.id !== id);\n  return newList;\n}; // Recommended Courses Filter Logic\n\n\nconst filterRecommended = answers => {\n  let recommended = courses; // if (answers[0] === 1) {\n  //   recommended = removeFromList(recommended, 1);\n  // }\n\n  if (answers[1] === 1) {\n    recommended = removeFromList(recommended, 2);\n  }\n\n  if (answers[2] === 1) {\n    recommended = removeFromList(recommended, 3);\n  }\n\n  if (answers[3] !== 1) {\n    recommended = removeFromList(recommended, 4);\n  }\n\n  if (answers[4] !== 1) {\n    recommended = removeFromList(recommended, 5);\n  }\n\n  if (answers[4] !== 2) {\n    recommended = removeFromList(recommended, 6);\n  }\n\n  if (answers[4] !== 4) {\n    recommended = removeFromList(recommended, 7);\n  }\n\n  if (answers[4] !== 6) {\n    recommended = removeFromList(recommended, 8);\n  }\n\n  if (answers[5] === 2) {\n    recommended = removeFromList(recommended, 9);\n  }\n\n  if (answers[6] === 1) {\n    recommended = removeFromList(recommended, 10);\n  }\n\n  return recommended;\n}; // Process select type: multi\n\n\nconst answerMulti = (answers, answer) => {\n  let index = answers.indexOf(answer);\n  let remove = false;\n\n  if (index >= 0) {\n    console.log(\"🔐 Index: \", index);\n    remove = true;\n  } else {\n    remove = false;\n    answers.push(answer);\n    answers.sort();\n  }\n\n  if (remove) {\n    answers.splice(index, 1);\n  }\n\n  return answers;\n}; // onClick Event Handler\n\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ANSWER\":\n      state.answers[state.questionNum - 1] = action.answer;\n      return { ...state,\n        answers: state.answers\n      };\n\n    case \"ANSWER_MULTI\":\n      let answers = state.answers[state.questionNum - 1];\n      let answer = action.answer;\n      console.log(\"🔐 Array Old: \", answers);\n\n      if (answers) {\n        answers = answerMulti(answers, answer);\n      } else {\n        answers = [answer];\n      }\n\n      console.log(\"🔐 Array New: \", answers);\n      state.answers[state.questionNum - 1] = answers; // if (state.answers[state.questionNum - 1]) {\n      //   console.log(\"🔐 Element was found!\");\n      //   // Edit list if existent\n      //   let answers = state.answers[state.questionNum - 1];\n      //   if (!answers.includes(action.answer)) {\n      //     console.log(\"🔐 Element item added!\");\n      //     // Add answer to list if non-existent\n      //     answers.push(action.answer);\n      //   } else {\n      //     console.log(\"🔐 Element item removed\");\n      //     // Remove answer from list if existent\n      //     answers.splice(answers.indexOf(action.answer), 1);\n      //   }\n      //   answers.sort();\n      //   state.answers[state.questionNum - 1] = answers;\n      // } else {\n      //   // Create list if non-existent\n      //   state.answers[state.questionNum - 1] = [];\n      //   state.answers[state.questionNum - 1].push(action.answer);\n      // }\n\n      return { ...state,\n        answers: state.answers\n      };\n\n    case \"NEXT_QUESTION\":\n      if (state.answers[state.questionNum - 1] === undefined) {\n        alert(\"Please select an answer before advancing...\");\n        return state;\n      }\n\n      if (state.questionNum === state.test.questions.length) {\n        return { ...state,\n          submit: true,\n          questionNum: state.questionNum + 1\n        };\n      }\n\n      if (state.questionNum > state.test.questions.length) {\n        return state;\n      }\n\n      return { ...state,\n        questionNum: state.questionNum + 1\n      };\n\n    case \"PREVIOUS_QUESTION\":\n      if (state.questionNum === 1) {\n        return state;\n      }\n\n      if (state.questionNum > state.test.questions.length) {\n        return { ...state,\n          submit: false,\n          questionNum: state.questionNum - 1\n        };\n      }\n\n      return { ...state,\n        questionNum: state.questionNum - 1\n      };\n\n    case \"SUBMIT\":\n      let recommended = filterRecommended(state.answers);\n      return { ...state,\n        recommended: recommended\n      };\n\n    case \"COURSE_SELECTED\":\n      return { ...state,\n        activeCourse: action.course\n      };\n\n    case \"SET_CONTACT_ID\":\n      return { ...state,\n        contactId: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/frith/Desktop/dev/react/assessment-sfm/src/configs/reducer.js"],"names":["test","courses","vaultAssessment","vaultAssessmentPaths","initialState","questionNum","answers","submit","contactId","recommended","activeCourse","removeFromList","listData","id","newList","filter","item","filterRecommended","answerMulti","answer","index","indexOf","remove","console","log","push","sort","splice","reducer","state","action","type","undefined","alert","questions","length","course"],"mappings":"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","sourcesContent":["import { test, courses, vaultAssessment, vaultAssessmentPaths } from \"./test\";\r\n\r\n// DataLayer\r\nexport const initialState = {\r\n  questionNum: 1,\r\n  // test: test,\r\n  test: vaultAssessment,\r\n  answers: [],\r\n  submit: false,\r\n  contactId: false,\r\n  recommended: null,\r\n  activeCourse: null,\r\n};\r\n\r\n// Remove Item From List\r\nconst removeFromList = (listData, id) => {\r\n  const newList = listData.filter((item) => item.id !== id);\r\n  return newList;\r\n};\r\n\r\n// Recommended Courses Filter Logic\r\nconst filterRecommended = (answers) => {\r\n  let recommended = courses;\r\n  // if (answers[0] === 1) {\r\n  //   recommended = removeFromList(recommended, 1);\r\n  // }\r\n  if (answers[1] === 1) {\r\n    recommended = removeFromList(recommended, 2);\r\n  }\r\n  if (answers[2] === 1) {\r\n    recommended = removeFromList(recommended, 3);\r\n  }\r\n  if (answers[3] !== 1) {\r\n    recommended = removeFromList(recommended, 4);\r\n  }\r\n  if (answers[4] !== 1) {\r\n    recommended = removeFromList(recommended, 5);\r\n  }\r\n  if (answers[4] !== 2) {\r\n    recommended = removeFromList(recommended, 6);\r\n  }\r\n  if (answers[4] !== 4) {\r\n    recommended = removeFromList(recommended, 7);\r\n  }\r\n  if (answers[4] !== 6) {\r\n    recommended = removeFromList(recommended, 8);\r\n  }\r\n  if (answers[5] === 2) {\r\n    recommended = removeFromList(recommended, 9);\r\n  }\r\n  if (answers[6] === 1) {\r\n    recommended = removeFromList(recommended, 10);\r\n  }\r\n  return recommended;\r\n};\r\n\r\n// Process select type: multi\r\nconst answerMulti = (answers, answer) => {\r\n  let index = answers.indexOf(answer);\r\n  let remove = false;\r\n\r\n  if (index >= 0) {\r\n    console.log(\"🔐 Index: \", index);\r\n    remove = true;\r\n  } else {\r\n    remove = false;\r\n    answers.push(answer);\r\n    answers.sort();\r\n  }\r\n\r\n  if (remove) {\r\n    answers.splice(index, 1);\r\n  }\r\n\r\n  return answers;\r\n};\r\n\r\n// onClick Event Handler\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ANSWER\":\r\n      state.answers[state.questionNum - 1] = action.answer;\r\n\r\n      return {\r\n        ...state,\r\n        answers: state.answers,\r\n      };\r\n\r\n    case \"ANSWER_MULTI\":\r\n      let answers = state.answers[state.questionNum - 1];\r\n      let answer = action.answer;\r\n      console.log(\"🔐 Array Old: \", answers);\r\n\r\n      if (answers) {\r\n        answers = answerMulti(answers, answer);\r\n      } else {\r\n        answers = [answer];\r\n      }\r\n\r\n      console.log(\"🔐 Array New: \", answers);\r\n      state.answers[state.questionNum - 1] = answers;\r\n      // if (state.answers[state.questionNum - 1]) {\r\n      //   console.log(\"🔐 Element was found!\");\r\n      //   // Edit list if existent\r\n      //   let answers = state.answers[state.questionNum - 1];\r\n\r\n      //   if (!answers.includes(action.answer)) {\r\n      //     console.log(\"🔐 Element item added!\");\r\n      //     // Add answer to list if non-existent\r\n      //     answers.push(action.answer);\r\n      //   } else {\r\n      //     console.log(\"🔐 Element item removed\");\r\n      //     // Remove answer from list if existent\r\n      //     answers.splice(answers.indexOf(action.answer), 1);\r\n      //   }\r\n      //   answers.sort();\r\n      //   state.answers[state.questionNum - 1] = answers;\r\n      // } else {\r\n      //   // Create list if non-existent\r\n      //   state.answers[state.questionNum - 1] = [];\r\n      //   state.answers[state.questionNum - 1].push(action.answer);\r\n      // }\r\n\r\n      return {\r\n        ...state,\r\n        answers: state.answers,\r\n      };\r\n\r\n    case \"NEXT_QUESTION\":\r\n      if (state.answers[state.questionNum - 1] === undefined) {\r\n        alert(\"Please select an answer before advancing...\");\r\n        return state;\r\n      }\r\n      if (state.questionNum === state.test.questions.length) {\r\n        return {\r\n          ...state,\r\n          submit: true,\r\n          questionNum: state.questionNum + 1,\r\n        };\r\n      }\r\n      if (state.questionNum > state.test.questions.length) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        questionNum: state.questionNum + 1,\r\n      };\r\n\r\n    case \"PREVIOUS_QUESTION\":\r\n      if (state.questionNum === 1) {\r\n        return state;\r\n      }\r\n      if (state.questionNum > state.test.questions.length) {\r\n        return {\r\n          ...state,\r\n          submit: false,\r\n          questionNum: state.questionNum - 1,\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        questionNum: state.questionNum - 1,\r\n      };\r\n\r\n    case \"SUBMIT\":\r\n      let recommended = filterRecommended(state.answers);\r\n      return {\r\n        ...state,\r\n        recommended: recommended,\r\n      };\r\n\r\n    case \"COURSE_SELECTED\":\r\n      return {\r\n        ...state,\r\n        activeCourse: action.course,\r\n      };\r\n\r\n    case \"SET_CONTACT_ID\":\r\n      return {\r\n        ...state,\r\n        contactId: true,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}