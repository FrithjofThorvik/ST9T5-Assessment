{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\frith\\\\Desktop\\\\dev\\\\react\\\\assessment-sfm\\\\src\\\\components\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Question from \"./Question\";\nimport Answer from \"./Answer\";\nimport Navigator from \"./Navigator\";\nimport { dispatch } from \"./StateProvider\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../css/Test.css\";\n\nfunction Test({\n  location\n}) {\n  _s();\n\n  const history = useHistory();\n  useEffect(() => {\n    // Declare variable\n    var contactId; // Check if session contains contactId\n\n    if (sessionStorage.getItem(\"sessionContactId\")) {\n      dispatch({\n        type: \"SET_CONTACT_ID\"\n      });\n      console.log(\"üîê Session Validated: \", sessionStorage.getItem(\"sessionContactId\"));\n    } // Set contactId from URL params\n    else {\n        // Fetch URL parameters\n        const urlParams = new URLSearchParams(location.search);\n\n        if (urlParams.has(\"contactId\")) {\n          contactId = +urlParams.get(\"contactId\"); // Validate contactId & process\n\n          if (!isNaN(contactId)) {\n            // Set session storage\n            sessionStorage.setItem(\"sessionContactId\", contactId); // Update DataLayer to validate session population\n\n            dispatch({\n              type: \"SET_CONTACT_ID\"\n            });\n            console.log(\"üîê contactId: \", contactId);\n            console.log(\"üîê Session Created: \", sessionStorage.getItem(\"sessionContactId\"));\n          } else {\n            console.log(\"üîê contactId is NaN...\");\n          }\n        } else {\n          console.log(\"üîê contactId Param was not found!\");\n        } // Remove contactId From Params\n\n\n        urlParams.delete(\"contactId\");\n        history.replace({\n          search: urlParams.toString()\n        });\n      }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-header\",\n        children: \"Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Question, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Answer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Navigator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Test, \"bz2N+u0mX89LO9zOCfVCA9Sa20M=\", false, function () {\n  return [useHistory];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/frith/Desktop/dev/react/assessment-sfm/src/components/Test.js"],"names":["React","useEffect","Question","Answer","Navigator","dispatch","useHistory","Test","location","history","contactId","sessionStorage","getItem","type","console","log","urlParams","URLSearchParams","search","has","get","isNaN","setItem","delete","replace","toString"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAO,iBAAP;;AAEA,SAASC,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAA4B;AAAA;;AAC1B,QAAMC,OAAO,GAAGH,UAAU,EAA1B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIS,SAAJ,CAFc,CAId;;AACA,QAAIC,cAAc,CAACC,OAAf,CAAuB,kBAAvB,CAAJ,EAAgD;AAC9CP,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CACE,wBADF,EAEEJ,cAAc,CAACC,OAAf,CAAuB,kBAAvB,CAFF;AAID,KAND,CAQA;AARA,SASK;AACH;AACA,cAAMI,SAAS,GAAG,IAAIC,eAAJ,CAAoBT,QAAQ,CAACU,MAA7B,CAAlB;;AAEA,YAAIF,SAAS,CAACG,GAAV,CAAc,WAAd,CAAJ,EAAgC;AAC9BT,UAAAA,SAAS,GAAG,CAACM,SAAS,CAACI,GAAV,CAAc,WAAd,CAAb,CAD8B,CAG9B;;AACA,cAAI,CAACC,KAAK,CAACX,SAAD,CAAV,EAAuB;AACrB;AACAC,YAAAA,cAAc,CAACW,OAAf,CAAuB,kBAAvB,EAA2CZ,SAA3C,EAFqB,CAGrB;;AACAL,YAAAA,QAAQ,CAAC;AAAEQ,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,SAA9B;AACAI,YAAAA,OAAO,CAACC,GAAR,CACE,sBADF,EAEEJ,cAAc,CAACC,OAAf,CAAuB,kBAAvB,CAFF;AAID,WAVD,MAUO;AACLE,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;AACF,SAjBD,MAiBO;AACLD,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACD,SAvBE,CAyBH;;;AACAC,QAAAA,SAAS,CAACO,MAAV,CAAiB,WAAjB;AACAd,QAAAA,OAAO,CAACe,OAAR,CAAgB;AACdN,UAAAA,MAAM,EAAEF,SAAS,CAACS,QAAV;AADM,SAAhB;AAGD;AACF,GA7CQ,EA6CN,EA7CM,CAAT;AA+CA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA5DQlB,I;UACSD,U;;;KADTC,I;AA8DT,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Question from \"./Question\";\r\nimport Answer from \"./Answer\";\r\nimport Navigator from \"./Navigator\";\r\nimport { dispatch } from \"./StateProvider\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../css/Test.css\";\r\n\r\nfunction Test({ location }) {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Declare variable\r\n    var contactId;\r\n\r\n    // Check if session contains contactId\r\n    if (sessionStorage.getItem(\"sessionContactId\")) {\r\n      dispatch({ type: \"SET_CONTACT_ID\" });\r\n      console.log(\r\n        \"üîê Session Validated: \",\r\n        sessionStorage.getItem(\"sessionContactId\")\r\n      );\r\n    }\r\n\r\n    // Set contactId from URL params\r\n    else {\r\n      // Fetch URL parameters\r\n      const urlParams = new URLSearchParams(location.search);\r\n\r\n      if (urlParams.has(\"contactId\")) {\r\n        contactId = +urlParams.get(\"contactId\");\r\n\r\n        // Validate contactId & process\r\n        if (!isNaN(contactId)) {\r\n          // Set session storage\r\n          sessionStorage.setItem(\"sessionContactId\", contactId);\r\n          // Update DataLayer to validate session population\r\n          dispatch({ type: \"SET_CONTACT_ID\" });\r\n          console.log(\"üîê contactId: \", contactId);\r\n          console.log(\r\n            \"üîê Session Created: \",\r\n            sessionStorage.getItem(\"sessionContactId\")\r\n          );\r\n        } else {\r\n          console.log(\"üîê contactId is NaN...\");\r\n        }\r\n      } else {\r\n        console.log(\"üîê contactId Param was not found!\");\r\n      }\r\n\r\n      // Remove contactId From Params\r\n      urlParams.delete(\"contactId\");\r\n      history.replace({\r\n        search: urlParams.toString(),\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"test\">\r\n      <div className=\"test-container\">\r\n        <div className=\"test-header\">Questions</div>\r\n        <Question />\r\n        <Answer />\r\n        <Navigator />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Test;\r\n"]},"metadata":{},"sourceType":"module"}